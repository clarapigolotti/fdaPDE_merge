Y<- seq(-3, 3, length.out = n)
grid <- expand.grid(X, Y)
evaluation <- eval.FEM(FEM(FEMbasis, coeff = sol$g), locations = grid)
evaluation <- exp(evaluation)
eval <- matrix(evaluation, n, n)
image2D(x=X, y=Y, z=eval, col=heat.colors(100), xlab="x",ylab="y", contour=list(drawlabels = FALSE), main = "Estimated density")
rm(list=ls())
graphics.off()
library(fdaPDE)
help(fdaPDE)
??fdaPDE
install.packages("/home/clara/Scaricati/PACSGhilottiPigolotti-master", type='source', repos=NULL)
install.packages("/home/clara/Scaricati/PACSGhilottiPigolotti-master", type=’source’, repos=NULL)
install.packages("/home/clara/Scaricati/PACSGhilottiPigolotti-master", type='source', repos=NULL)
install.packages("/home/clara/Scaricati/Pr--ove/PACSGhilottiPigolotti-master", type='source', repos=NULL)
install.packages("home/clara/Scaricati/Pr--ove/PACSGhilottiPigolotti-master", type='source', repos=NULL)
remove.packages("fdaPDE")
install.packages("home/clara/Scaricati/Prove/PACSGhilottiPigolotti-master", type='source', repos=NULL)
remove.packages("fdaPDE")
remove.packages("fdaPDE")
install.packages("/home/clara/Documenti/fdaPDE_versioni/pacsColliColombo-master", type="source", repos=NULL)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
}
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2,3,4,5)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2)
myfunction(data)
data <- c(1,2)
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
i<length(data)
length(data)
data[i]!=data[i+1]-1
data[i]
data[i+1]-1
check<-0
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
}
pritnf(check)
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
pritnf(check)
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
printf(check)
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
print(check)
if(data[i]!=data[i+1]-1){
check<-0
}
}
check
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
print(check)
if(data[i]!=data[i+1]-1){
check<-0
}
i <- i+1
}
check
}
data <- c(1,2)
myfunction(data)
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
i <- i+1
}
check
}
data <- c(1,2)
res <- myfunction(data)
res
myfunction <- function(data){
i<-1
check<-1
while(i<length(data) && check==1){
if(data[i]!=data[i+1]-1){
check<-0
}
i <- i+1
}
check
}
data <- c(1,2,4)
res <- myfunction(data)
res
ndata=200
mu1 <- c(-0.3, -0.5, 0.9)
mu1 <- mu1 / sqrt( sum(mu1^2) )
k1=18
beta1=3
data1 <- rkent(ndata/4, k1, mu1, beta1)
mu2 <- c(-0.3, -0.5, 0.2)
mu2 <- mu2 / sqrt( sum(mu2^2) )
k2=15
beta2=3
data2 <- rkent(ndata/4, k2, mu2, beta2)
mu3 <- c(0.6, -0.5, 0.8)
mu3 <- mu3 / sqrt( sum(mu3^2) )
k3=20
beta3=5
data3 <- rkent(ndata/4, k3, mu3, beta3)
mu4 <- c(0.2, -1, 0.2)
mu4 <- mu4 / sqrt( sum(mu4^2) )
k4=20
beta4=0
data4 <- rkent(ndata/4, k4, mu4, beta4)
data=rbind(data1, data2, data3, data4)
library(Directional)
ndata=200
mu1 <- c(-0.3, -0.5, 0.9)
mu1 <- mu1 / sqrt( sum(mu1^2) )
k1=18
beta1=3
data1 <- rkent(ndata/4, k1, mu1, beta1)
mu2 <- c(-0.3, -0.5, 0.2)
mu2 <- mu2 / sqrt( sum(mu2^2) )
k2=15
beta2=3
data2 <- rkent(ndata/4, k2, mu2, beta2)
mu3 <- c(0.6, -0.5, 0.8)
mu3 <- mu3 / sqrt( sum(mu3^2) )
k3=20
beta3=5
data3 <- rkent(ndata/4, k3, mu3, beta3)
mu4 <- c(0.2, -1, 0.2)
mu4 <- mu4 / sqrt( sum(mu4^2) )
k4=20
beta4=0
data4 <- rkent(ndata/4, k4, mu4, beta4)
data=rbind(data1, data2, data3, data4)
plot3d(data)
library(fdaPDE)
plot3d(data)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1) +
0.25*rkent(ndata, k2, mu2, beta2) +
0.25*rkent(ndata, k3, mu3, beta3) +
0.25*rkent(ndata, k4, mu4, beta4)
open3d()
plot3d(data1)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1)
open3d()
plot3d(data1)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1) +
0.25*rkent(ndata, k2, mu2, beta2)
open3d()
plot3d(data1)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1)
open3d()
plot3d(data1)
data1 <- 0.25*rkent(ndata, k1, mu1, beta1)
data2<-  0.25*rkent(ndata, k2, mu2, beta2)
open3d()
plot3d(data1)
open3d()
plot3d(data2)
dataa <- data1 + data2
open3d()
plot3d(dataa)
rm(list=ls())
while (rgl.cur() > 0) { rgl.close() }
0.068464377+
0.109543004+
0.068464377+
0.061728395+
0.098765432+
0.061728395+
0.008696116+
0.013913785+
0.008696116
# VERSION CRAN (NO OMP)
# Documentation
setwd("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge_VersioneCRAN/fdaPDE_merge")
roxygen2::roxygenise()
# VERSION CRAN (NO OMP)
# Documentation
setwd("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge_VersioneCRAN/fdaPDE_merge")
roxygen2::roxygenise()
# VERSION CRAN (NO OMP)
# Documentation
setwd("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge_VersioneCRAN/fdaPDE_merge")
roxygen2::roxygenise()
remove.packages("fdaPDE")
install.packages("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge_VersioneCRAN/fdaPDE_merge", type="source", repos=NULL)
# AFTER INTEGRATION --------------------------
# 2D -------------------------
rm(list=ls())
graphics.off()
library(fdaPDE)
setwd("~/Documenti/PACSProject/PACSProject/Dataset/Sim_Mixture")
data = read.table("process1.txt")
# Mesh nuova
Xbound <- seq(-6, 6, length.out = 20)
Ybound <- seq(-6, 6, length.out = 20)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-6, 6)) | (grid_XY$Var2 %in% c(-6, 6)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
lambda = 1e-1
order <- 1
nfolds = NULL
nsims = 10
sol=DE.FEM(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method="NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nsim = nsims)
remove.packages("fdaPDE")
install.packages("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge_VersioneCRAN/fdaPDE_merge", type="source", repos=NULL)
# AFTER INTEGRATION --------------------------
# 2D -------------------------
rm(list=ls())
graphics.off()
library(fdaPDE)
setwd("~/Documenti/PACSProject/PACSProject/Dataset/Sim_Mixture")
data = read.table("process1.txt")
# Mesh nuova
Xbound <- seq(-6, 6, length.out = 20)
Ybound <- seq(-6, 6, length.out = 20)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-6, 6)) | (grid_XY$Var2 %in% c(-6, 6)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
lambda = 1e-1
order <- 1
nfolds = NULL
nsims = 10
sol=DE.FEM(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method="NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nsim = nsims)
# VERSION CRAN (NO OMP)
# Documentation
setwd("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge_VersioneCRAN/fdaPDE_merge")
roxygen2::roxygenise()
install.packages("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge_VersioneCRAN/fdaPDE_merge", type="source", repos=NULL)
# AFTER INTEGRATION --------------------------
# 2D -------------------------
rm(list=ls())
graphics.off()
library(fdaPDE)
setwd("~/Documenti/PACSProject/PACSProject/Dataset/Sim_Mixture")
data = read.table("process1.txt")
# Mesh nuova
Xbound <- seq(-6, 6, length.out = 20)
Ybound <- seq(-6, 6, length.out = 20)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-6, 6)) | (grid_XY$Var2 %in% c(-6, 6)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
lambda = 1e-1
order <- 1
nfolds = NULL
nsims = 10
sol=DE.FEM(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method="NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nsim = nsims)
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
g_2D_before <- read.table("g_2D_before")$V1
g_2D_after <- read.table("g_2D_after")$V1
sum(g_2D_before - g_2D_after)
sum(g_2D_before - sol$g)
sum(g_2D_after - sol$g)
head(sol$g)
head(g_2D_before)
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
write.table(sol$g, file = "g_2D_cran", sep="\n", col.names=FALSE,row.names=FALSE)
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
g_3D_before <- read.table("g_3D_before")$V1
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
g_2D_before <- read.table("g_2D_before")$V1
g_2D_after <- read.table("g_2D_after")$V1
sum(g_2D_before - g_2D_after)
g_2D_cran <- read.table("g_2D_cran")$V1
sum(g_2D_before - g_2D_cran)
sum(g_2D_after - g_2D_cran)
rm(list=ls())
graphics.off()
while (rgl.cur() > 0) { rgl.close() }
library(fdaPDE)
setwd("~/Documenti/TESI/Thesis/Geometrie_2.5D_3D/Geometrie_2.5D_e_3D")
vertici_sfera_2.5D <- read.table("Sfera_2_5D_vertici.txt", quote="\"", comment.char="")
triangoli_sfera_2.5D <- read.table("Sfera_2_5D_triangoli.txt", quote="\"", comment.char="")
mesh<- fdaPDE::create.mesh.2.5D(nodes = vertici_sfera_2.5D[,1:3], triangles = triangoli_sfera_2.5D[,1:3])
FEMbasis <- fdaPDE::create.FEM.basis(mesh)
lambda = 1e-2
nsims = 10
nfolds = NULL
i = 1
setwd("~/Documenti/TESI/Thesis/RCode/Data/Mixture10_200data")
data = read.table(file = paste("process", i, ".txt", sep = ""))
sol=DE.FEM(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda, heatStep=0.1, heatIter=1000,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method = "NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nThreads_int = 2,
nThreads_l=1, nThreads_fold=1, nsim = nsims, tol1=1e-4)
sol=DE.FEM(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda, heatStep=0.1, heatIter=1000,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method = "NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nsim = nsims, tol1=1e-4)
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
g_25D_before <- read.table("g_25D_before")$V1
g_25D_after <- read.table("g_25D_after")$V1
sum(g_25D_before - g_25D_after)
sum(g_25D_before - sol$g)
rm(list=ls())
graphics.off()
remove.packages("fdaPDE")
# fadPDE merge
install.packages("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge", type="source", repos=NULL)
rm(list=ls())
graphics.off()
library(fdaPDE)
setwd("~/Documenti/PACSProject/PACSProject/Dataset/Sim_Mixture")
data = read.table("process1.txt")
# Mesh nuova
Xbound <- seq(-6, 6, length.out = 20)
Ybound <- seq(-6, 6, length.out = 20)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-6, 6)) | (grid_XY$Var2 %in% c(-6, 6)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
lambda = 1e-1
order <- 1
nfolds = NULL
nsims = 10
sol=DE.FEM(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method="NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nsim = nsims)
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
g_2D_before <- read.table("g_2D_before")$V1
g_2D_after <- read.table("g_2D_after")$V1
sum(g_2D_before - g_2D_after)
g_2D_cran <- read.table("g_2D_cran")$V1
sum(g_2D_before - sol$g)
sum(sol$g - g_2D_cran)
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
write.table(sol$g, file = "prova", sep="\n", col.names=FALSE,row.names=FALSE)
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
g <- read.table("prova")$V1
sum(prova - g_2D_cran)
sum(g - g_2D_cran)
rm(list=ls())
remove.packages("fdaPDE")
# MY VERSION NO OMP
install.packages("/home/clara/Documenti/fdaPDE_versioneCompleta/MyfdaPDE_merge_noOMP", type="source", repos=NULL)
# MY VERSION NO OMP
install.packages("/home/clara/Documenti/fdaPDE_versioneCompleta/MyfdaPDE_merge_noOMP", type="source", repos=NULL)
rm(list=ls())
graphics.off()
library(fdaPDE)
setwd("~/Documenti/PACSProject/PACSProject/Dataset/Sim_Mixture")
data = read.table("process1.txt")
# Mesh nuova
Xbound <- seq(-6, 6, length.out = 20)
Ybound <- seq(-6, 6, length.out = 20)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-6, 6)) | (grid_XY$Var2 %in% c(-6, 6)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
lambda = 1e-1
order <- 1
nfolds = NULL
nsims = 10
sol=DE.FEM(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method="NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nsim = nsims)
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
g_25D_before <- read.table("g_25D_before")$V1
g_25D_after <- read.table("g_25D_after")$V1
setwd("~/Documenti/fdaPDE_versioneCompleta/Results")
g_2D_before <- read.table("g_2D_before")$V1
g_2D_after <- read.table("g_2D_after")$V1
sum(g_2D_before - g_2D_after)
sum(g_2D_before - sol$g)
g_2D_cran <- read.table("g_2D_cran")$V1
sum(g_2D_cran - sol$g)
sum(prova - sol$g)
prova <- read.table("prova")$V1
sum(prova - sol$g)
remove.packages("fdaPDE")
# fadPDE merge
install.packages("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge", type="source", repos=NULL)
remove.packages("fdaPDE")
install.packages("/home/clara/Documenti/PACSProject/PACSGhilottiPigolotti", type="source", repos=NULL)
# PACSGhilottiPigolotti
setwd("/home/clara/Documenti/PACSProject/PACSGhilottiPigolotti")
roxygen2::roxygenise()
install.packages("/home/clara/Documenti/PACSProject/PACSGhilottiPigolotti", type="source", repos=NULL)
# AFTER INTEGRATION --------------------------
# 2D -------------------------
rm(list=ls())
graphics.off()
library(fdaPDE)
setwd("~/Documenti/PACSProject/PACSProject/Dataset/Sim_Mixture")
data = read.table("process1.txt")
# Mesh nuova
Xbound <- seq(-6, 6, length.out = 20)
Ybound <- seq(-6, 6, length.out = 20)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-6, 6)) | (grid_XY$Var2 %in% c(-6, 6)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
rm(list=ls())
graphics.off()
library(fdaPDE)
setwd("~/Documenti/PACSProject/PACSProject/Dataset/Sim_Mixture")
data = read.table("process1.txt")
# Mesh nuova
Xbound <- seq(-6, 6, length.out = 20)
Ybound <- seq(-6, 6, length.out = 20)
grid_XY <- expand.grid(Xbound, Ybound)
Bounds <- grid_XY[(grid_XY$Var1 %in% c(-6, 6)) | (grid_XY$Var2 %in% c(-6, 6)), ]
mesh <- create.mesh.2D(nodes = Bounds, order = 1)
mesh <- refine.mesh.2D(mesh, maximum_area = 0.2)
FEMbasis <- create.FEM.basis(mesh)
lambda = 1e-1
order <- 1
nfolds = NULL
nsims = 10
sol=density.FEM(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method="NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nsim = nsims)
sol=FEM.density(data = data, FEMbasis = FEMbasis, fvec=NULL,  lambda = lambda,
step_method="Fixed_Step", direction_method="BFGS", preprocess_method="NoCrossValidation",
nfolds=nfolds, stepProposals = NULL, print = FALSE, nsim = nsims)
# PACSGhilottiPigolotti
setwd("/home/clara/Documenti/PACSProject/PACSGhilottiPigolotti")
roxygen2::roxygenise()
# VERSION CRAN (NO OMP)
# Documentation
setwd("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge_VersioneCRAN/fdaPDE_merge")
roxygen2::roxygenise()
# Documentation
setwd("/home/clara/Documenti/fdaPDE_versioneCompleta/fdaPDE_merge")
roxygen2::roxygenise()
